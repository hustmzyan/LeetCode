/**
 * 32. Longest Valid Parentheses
 * 
 * Given a string containing just the characters '(' and ')', 
 * find the length of the longest valid (well-formed) parentheses substring.
 * 
 */
#include <stdio.h>
#include <stack>
#include <iostream>
using namespace std;


class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.length();
        stack<int> stk;
    
        for (int i = 0; i < n; i++) {
            if (s[i] == '(')
                stk.push(i);
            else if ((stk.empty() || s[stk.top()] != '(') && s[i] == ')')
                stk.push(i);
            else if (s[stk.top()] == '(' && s[i] == ')')
             stk.pop();
         }
    
        int len = 0, prev_idx = n;
        while (!stk.empty()) {
            int t = stk.top();
            len = max(len, prev_idx-t-1);
            prev_idx = t;
            stk.pop();
        }
    
        len = max(len, prev_idx);
    
        return len;
    }
};

int main(){

    string s = "(()(()()()(()())()(()()))()()())()(((()())((())(()()((()((((())(())()()(())()(()(()(())))))))(()()()))()()))))))(()())))((())())))()(((()(()))())((())))(())(((()()))))())))((()((()()(()))())(()))(())((())()(((()(((()))))()))()()())()()()(()(()(()()()(()(())(())))())()))())(())((())(()((((())((())((())(()()(((()))(()(((())())()(())))(()))))))(()(()(()))())(()()(()(((()()))()(())))(()()(())))))(()(()()())))()()())))))((())(()()(((()(()()))(())))(((()))())())())(((()((()((()())((()))(()()((()(())())(()))()())())))))()(()())))()()))(((()(()))((()((((())((())))((())()()))())()(((()()(((()))))))(((()))()(()(((())(())()()()))))()))()))))()(()))()()()))))()(()))()()(()())))(()))()())(())()())(())()()))(()())))((()())))())))))((()))())()()))))()))(((())(())()))()()((()))(((()))))((()((()))(())(((()))()()()())())())))(()(((())()())(())(((()()((())()))(()()(((())))((()(((()))(((((()(((())())))(())(()()((()(()(())())(((((())((()()))())(()())))()()()(()(((((((())))(()()()()((()(((())())())())))())())())))()((((())(((()()()())()))()()(()(()()))()))(())(()())))))()())()())))()()(())))))))((())()()(((()))()))())))))((()())((()())(((())()())()))(()(()()(((()(())()))()())()()(())()(()))))()))()()))))(())(()()(())((()))(()))((())))))(())))()))(()()(())))())()((())()))((()()(()())()()(()))())(((())()(((()((())()(()()()((()(()())(()())())((((())))())())))(()))(((())((()))))((()()(((())((())()()()))((()())()()())())))))((((()((()())))(())(())()()()(((((())())()()()(())())()((()(()())(((())((((()((()(((()))(()()))())()()(()(()(())))()))())))(()()(()))))))(()()())()()))()(())()(";

    Solution solu;

    int cnt = solu.longestValidParentheses(s);

    cout << cnt << endl;

    return 0;
}